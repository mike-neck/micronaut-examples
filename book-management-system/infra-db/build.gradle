import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.allopen"
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencies {
    implementation project(":domains")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "javax.inject:javax.inject:1"

    implementation "org.seasar.doma:doma:2.25.1"
    kapt "org.seasar.doma:doma:2.25.1"

    testImplementation "com.h2database:h2:1.4.199"

    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
}

test {
    useJUnitPlatform()
}

kapt {
    arguments {
        arg("doma.resources.dir", compileKotlin.destinationDir)
        arg("doma.domain.converters", 'com.example.book.conv.Converters')
    }
}

compileKotlin {
    dependsOn "copyDomaResources", "pickDomainConverters"
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileKotlin.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}

task pickDomainConverters {
    doLast {
        def dir = file('src/main/kotlin/com/example/book/conv').toPath()
        def files = Files.list(dir).collect(Collectors.toList()).findAll { it.getFileName().toString() != 'Converters.kt' }
        def classes = []
        files.collect {
            def annotation = false
            it.text.eachLine { line ->
                if (annotation == true) {
                    def items = line.split(' ')
                    def klass = items[1].replace(':', '').trim()
                    classes << klass
                    annotation = false
                } else if (line.trim() == '@ExternalDomain') annotation = true
            }
        }
        logger.info "${classes.join(', ')} will be listed."
        file('src/main/kotlin/com/example/book/conv/Converters.kt').write("""
package com.example.book.conv

import org.seasar.doma.DomainConverters

@DomainConverters(
        ${classes.collect { "$it::class" }.join(',\n        ')}
)
interface Converters
""", 'UTF-8')
    }
}
